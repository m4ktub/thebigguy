{
  "$schema": "https://ide.bitauth.com/authentication-template-v0.schema.json",
  "description": "Ensuring everyone gets their share.",
  "name": "The Big Guy",
  "entities": {},
  "scripts": {
    "input_36378418": {
      "name": "Input 36378418",
      "script": "<0x010000000000000000000000000000000000000000000000000000000000000000000000>\r\n<0x608cf301000000001976a914147c021a6995105ea0e62762b23f5497520d555688ac60813700000000001976a9140f17b7558fdc7d538f37b61c548280d8b28738c288ac>\r\n<0xf15f426b553479f00d2c760145867c90993741dcc56d4d6a172c65e982be082d17f6978fd7cc797634d12f1d4c987ba8d7e66c640e8404182a0c283b1d28951141>\r\n<0x02000000>\r\n<0xd5a45bffe65ef500725b4bc16e60ba39910d364324f702be75ed825c1c78a50c>\r\n<0x3bb13029ce7b1f559ef5e747fcac439f1455a2ec7c5f09b72290795e70665044>\r\n<0x010000000000000000000000000000000000000000000000000000000000000000000000>\r\n<0xfd3f0121027ce376e17e46e46614266096d8bc723c881b600227c1b496ada37b1a668b2d8b6f77ad7b01407f755279a87bbb547f7701207f01447f77820134947f587f547f7701207f755479aa88547a82012488aa537a88760800000080ffffffff84630317a9147b537f77a901877e7e7b587f01187f587f7b76557a8888537f7c01007e817b537f7c01007e817b9302d007935480537f8172537f7c01007e817b537f7c01007e817b93537a935480537f8172817c81939352807e7e87678102d0079402e8039676519f636d0a0000000000000000016a87677b517951a263587f517f7c7f7b7b1976a914147c021a6995105ea0e62762b23f5497520d555688ac88810284039652798868517956a263587f517f7c7f7b7b1976a9140f17b7558fdc7d538f37b61c548280d8b28738c288ac8881016496527988688b7b7b6d6868>\r\n<0x32172b0200000000>\r\n<0xffffffff>\r\n<0x5c9eacb632e0afb9c8e36ba2318c92df53e283c43ffb7c6f4bf4f6b4a5b6879f>\r\n<0x0000000041000000>",
      "unlocks": "script1"
    },
    "input_32757207424": {
      "name": "Input 32757207424",
      "script": "<0x010000000000000000000000000000000000000000000000000000000000000000000000>\r\n<0xd8a43dd00300000017a91485704d6c28ee421a2f171d75af66778006a6be5a87d8a43dd00300000017a91485704d6c28ee421a2f171d75af66778006a6be5a87>\r\n<0x59ed31e3f305445972c3a411ddff02b39847ab1339c043d58b9bcf3f27025eef8f5722c41a1a15d2cf677237c8841252d2b0b5cc6914d0ddda2df50952b3640241>\r\n<0x02000000>\r\n<0xd5a45bffe65ef500725b4bc16e60ba39910d364324f702be75ed825c1c78a50c>\r\n<0x3bb13029ce7b1f559ef5e747fcac439f1455a2ec7c5f09b72290795e70665044>\r\n<0x010000000000000000000000000000000000000000000000000000000000000000000000>\r\n<0xfd3f0121027ce376e17e46e46614266096d8bc723c881b600227c1b496ada37b1a668b2d8b6f77ad7b01407f755279a87bbb547f7701207f01447f77820134947f587f547f7701207f755479aa88547a82012488aa537a88760800000080ffffffff84630317a9147b537f77a901877e7e7b587f01187f587f7b76557a8888537f7c01007e817b537f7c01007e817b9302d007935480537f8172537f7c01007e817b537f7c01007e817b93537a935480537f8172817c81939352807e7e87678102d0079402e8039676519f636d0a0000000000000000016a87677b517951a263587f517f7c7f7b7b1976a914147c021a6995105ea0e62762b23f5497520d555688ac88810284039652798868517956a263587f517f7c7f7b7b1976a9140f17b7558fdc7d538f37b61c548280d8b28738c288ac8881016496527988688b7b7b6d6868>\r\n<0x80517ba007000000>\r\n<0xffffffff>\r\n<0x1e5b29f7e57e36f56fd6aa25ea580a09d4b6ecab0c558fd3ebcc68f688ad8f48>\r\n<0x0000000041000000>\r\n",
      "unlocks": "script1"
    },
    "input_3000": {
      "name": "Input 3000",
      "script": "<0x010000000000000000000000000000000000000000000000000000000000000000000000>\r\n<0x84030000000000001976a914147c021a6995105ea0e62762b23f5497520d555688ac>\r\n<0x2cb4bd38b195f0e9ac2b0270e470a70ae550afb55a633fd9650cbb0d4eb1320c4f2088b45f3efc096e31ac487fcd5d327ce5b2e27e7eb1e936ba14e9f61affc041>\r\n<0x02000000>\r\n<0xd5a45bffe65ef500725b4bc16e60ba39910d364324f702be75ed825c1c78a50c>\r\n<0x3bb13029ce7b1f559ef5e747fcac439f1455a2ec7c5f09b72290795e70665044>\r\n<0x010000000000000000000000000000000000000000000000000000000000000000000000>\r\n<0xfd3f0121027ce376e17e46e46614266096d8bc723c881b600227c1b496ada37b1a668b2d8b6f77ad7b01407f755279a87bbb547f7701207f01447f77820134947f587f547f7701207f755479aa88547a82012488aa537a88760800000080ffffffff84630317a9147b537f77a901877e7e7b587f01187f587f7b76557a8888537f7c01007e817b537f7c01007e817b9302d007935480537f8172537f7c01007e817b537f7c01007e817b93537a935480537f8172817c81939352807e7e87678102d0079402e8039676519f636d0a0000000000000000016a87677b517951a263587f517f7c7f7b7b1976a914147c021a6995105ea0e62762b23f5497520d555688ac88810284039652798868517956a263587f517f7c7f7b7b1976a9140f17b7558fdc7d538f37b61c548280d8b28738c288ac8881016496527988688b7b7b6d6868>\r\n<0xb80b000000000000>\r\n<0xffffffff>\r\n<0x23172f5ad5d044ab68a5915feb47c52bda3595762e7cdc26d76ca50d6fdb6150>\r\n<0x0000000041000000>\r\n",
      "unlocks": "script1"
    },
    "input_2999": {
      "name": "Input 2999",
      "script": "<0x010000000000000000000000000000000000000000000000000000000000000000000000>\r\n<0x0000000000000000016a>\r\n<0x56cb3a01f2cbdba2ea44f20c188ad7b67684de7a3cd6263931d6b33931975199390a7d68e0b84e54dd1ea24bc84d7b40860c1b8b52d65b8ceaeb163041c7516441>\r\n<0x02000000>\r\n<0xd5a45bffe65ef500725b4bc16e60ba39910d364324f702be75ed825c1c78a50c>\r\n<0x3bb13029ce7b1f559ef5e747fcac439f1455a2ec7c5f09b72290795e70665044>\r\n<0x010000000000000000000000000000000000000000000000000000000000000000000000>\r\n<0xfd3f0121027ce376e17e46e46614266096d8bc723c881b600227c1b496ada37b1a668b2d8b6f77ad7b01407f755279a87bbb547f7701207f01447f77820134947f587f547f7701207f755479aa88547a82012488aa537a88760800000080ffffffff84630317a9147b537f77a901877e7e7b587f01187f587f7b76557a8888537f7c01007e817b537f7c01007e817b9302d007935480537f8172537f7c01007e817b537f7c01007e817b93537a935480537f8172817c81939352807e7e87678102d0079402e8039676519f636d0a0000000000000000016a87677b517951a263587f517f7c7f7b7b1976a914147c021a6995105ea0e62762b23f5497520d555688ac88810284039652798868517956a263587f517f7c7f7b7b1976a9140f17b7558fdc7d538f37b61c548280d8b28738c288ac8881016496527988688b7b7b6d6868>\r\n<0xb70b000000000000>\r\n<0xffffffff>\r\n<0x0e8538c66c434675836e2198aceb9a0bb62f3778a505eba907d843d312712b6d>\r\n<0x0000000041000000>\r\n",
      "unlocks": "script1"
    },
    "script1": {
      "lockingType": "p2sh20",
      "name": "900/100 - 2000 fee",
      "script": "//\n// inputs\n// <prevouts> <outputs> <sig,sigflags> <preimage[1,2,3,4,5,6,7,8,9-10]>\n//\n// To work around the 520-push limits, the preimage will be provided as \n// multiple pushes. All preimage parts are pushed individually, except the\n// last two because they are not needed.\n//\n// Since the preimage is split, the verification of the multiple parts is \n// done first and all signature verifications are left to the end.  \n//\n\n//\n// check prevouts SHA256d\n// <prevouts> <outputs> <sig,sigflags> <preimage[1]> <hashPrevouts> ...\n// ... <preimage[3,4,5,6,7,8,9-10]>\n//\n\n<11>\nOP_ROLL\nOP_DUP\nOP_HASH256\n<9>\nOP_PICK\nOP_EQUALVERIFY\n\n//\n// make sure that only one script input is used\n// <outputs> <sig,sigflags> <preimage[1,2,3]> <outpoint> ...\n// ... <preimage[5,6,7,8,9-10]> <prevouts>\n//\n// Ensuring a single script input is needed because a transaction could \n// be made with multiple coins of the same value. The input script for \n// each coin would validate the same outputs but only one coin would be\n// split and all the others would be givne to miners.\n//\n// By matching the preimage outpoint with the first prevout provided as\n// input we limit the number of scripts inputs while allowing for more \n// inputs that can add fees. This is important to make all coins spendable \n// because transactions will be bigger than 546 bytes.\n//\n\n<36>\nOP_SPLIT\nOP_DROP\n<6>\nOP_PICK\nOP_EQUALVERIFY\n\n//\n// check outputs SHA256d\n// <outputs> <sig,sigflags> <preimage[1,2,3,4,5,6,7]> <hashOutputs> ...\n// ... <preimage[9-10]>\n//\n\nOP_OVER\n<11>\nOP_ROLL\nOP_DUP\nOP_HASH256\nOP_ROT\nOP_EQUALVERIFY\n\n//\n// bring script and value to top to enable output verification\n// <sig,sigflags> <preimage[1,2,3,4]> <size,scriptCode> <value as bin> ...\n// ... <preimage[7,8,9-10]> <outputs>\n//\n\n<5>\nOP_PICK\n<5>\nOP_PICK\n\n//\n// check for input value overflow (5 bytes of more)\n// ... <outputs> <size,scriptCode> <value as bin>\n//\n// Script numbers are signed and may require a leading 0 byte to mark\n// the number as positive when the most significant bit is set. But \n// script math operations only accept minimally encoded numbers that fit \n// in 4 bytes. This means that shares can only be verified for values\n// no larger than 0x7fffffff (big-endian).\n//\n// To make all inputs spendable there are two paths. When the input\n// value is within range, the shares are computed as expected. But when\n// the input value is out of range, only two outputs, to the contract\n// address, are allowed and their values (plus the fee) must match the\n// input value. This can be done because 64-bit addition can be emulated\n// with lower-bit addition and carry over. Fo this, 24-bit addition is\n// used because any overflow will fit in 4 bytes.\n//\n\nOP_DUP\n<0x00000080ffffffff>\nOP_AND\nOP_IF\n\n  //\n  // compute the contract output script  \n  // ... <outputs> <size,scriptCode> <value as bin>\n  //\n\n  <0x17a914> // PUSH(23), HASH160, PUSH(20)\n  OP_ROT\n  <3>        // assume length of compact size\n  OP_SPLIT\n  OP_NIP\n  OP_HASH160\n  <0x87>     // OP_EQUAL\n  OP_CAT\n  OP_CAT\n\n  //\n  // validate output destinations, preserve output values\n  // ... <outputs> <value as bin> <outputscript>\n  //\n\n  OP_ROT\n\n  <8>\n  OP_SPLIT\n  <24>\n  OP_SPLIT\n  <8>\n  OP_SPLIT\n\n  OP_ROT\n\n  // ... <value as bin> <outputscript> <value1 as bin> <value2 as bin> ...\n  // ... <script2> <script1>\n\n  OP_DUP\n  <5>\n  OP_ROLL\n\n  OP_EQUALVERIFY // <script1> == <outputscript> \n  OP_EQUALVERIFY // <script2> == <script1> \n\n  //\n  // validate that the output values plus fee equals input value\n  // ... <value as bin> <outputscript> <value1 as bin> <value2 as bin>\n  //\n\n  <3>\n  OP_SPLIT\n  OP_SWAP\n  <0x00>\n  OP_CAT\n  OP_BIN2NUM\n  OP_ROT\n\n  <3>\n  OP_SPLIT\n  OP_SWAP\n  <0x00>\n  OP_CAT\n  OP_BIN2NUM\n  OP_ROT\n\n  OP_ADD     // add bits 0 - 23\n\n  // $fee\n  <2000>\n  OP_ADD     // add fee, can be at most 2113929217\n\n  <4>\n  OP_NUM2BIN\n  <3>\n  OP_SPLIT\n  OP_BIN2NUM // carryover for bits 24 - 47\n  OP_2SWAP\n\n  <3>\n  OP_SPLIT\n  OP_SWAP\n  <0x00>\n  OP_CAT\n  OP_BIN2NUM\n  OP_ROT\n\n  <3>\n  OP_SPLIT\n  OP_SWAP\n  <0x00>\n  OP_CAT\n  OP_BIN2NUM\n  OP_ROT\n\n  OP_ADD     // add bits 24 - 27\n  <3>\n  OP_ROLL\n  OP_ADD     // add carryover for bits 24 - 47\n\n  <4>\n  OP_NUM2BIN\n  <3>\n  OP_SPLIT\n  OP_BIN2NUM // carryover for bits 48 - 63\n  OP_2SWAP\n\n  OP_BIN2NUM // will always have a leading zero\n  OP_SWAP\n  OP_BIN2NUM // will always have a leading zero\n  \n  OP_ADD     // add bits 48 - 63\n  OP_ADD     // add carryover for bits 48 - 63\n\n  <2>\n  OP_NUM2BIN\n\n  OP_CAT     // join bits 24 - 63\n  OP_CAT     // join bits 0 - 63\n\n  OP_EQUALVERIFY\n\nOP_ELSE\n\n  //\n  // drop script code, not neded for output verification \n  // ... <outputs> <size,scriptCode> <value as bin>\n  //\n\n  OP_NIP\n\n  //\n  // can validate shares, start by taking fixed fee from value\n  // ... <outputs> <value as bin>\n  //\n\n  OP_BIN2NUM\n  // $fee\n  <2000>\n  OP_SUB\n\n  //\n  // calculate 1/1000 unit from input value\n  // ... <outputs> <value>\n  //\n\n  <1000>\n  OP_DIV\n\n  //\n  // check if unit is below the minimum of all shares\n  // ... <outputs> <unit>\n  //\n  // This means that, for all shares, unit times share is smaler than 546.\n  //  \n\n  OP_DUP\n  // $absoluteMinShare\n  <1>\n  OP_LESSTHAN\n  OP_IF\n\n    //\n    // drop unit, not longer needed for output verification \n    // ... <outputs> <unit>\n    //\n\n    OP_DROP\n\n    //\n    // check for an empty OP_RETURN\n    // ... <outputs>\n    //\n    // The OP_RETURN is enforced because there's no way to respect the \n    // shares and any other distribution would be arbitrary. A future \n    // version may allow consolidation to the contract address.\n    //\n\n    OP_REVERSEBYTES\n    OP_BIN2NUM\n    <0x6a01>\n    OP_EQUALVERIFY\n\n  OP_ELSE\n\n    //\n    // bring outputs to the top, to allow a dynamic number of shares\n    // ... <outputs> <unit>\n    //\n\n    OP_SWAP\n\n    // \n    // check if party1 must be present\n    // ... <unit> <outputs[1-n]>\n    //\n\n    OP_OVER\n    // $minUnit1\n    <1>\n    OP_GREATERTHANOREQUAL\n    OP_IF\n\n      //\n      // extract value and output script (save remaining outputs)\n      // ... <unit> <outputs[1-n]>\n      //\n\n      <8>\n      OP_SPLIT\n      <1>      // first byte is the var size, always minimally encoded (size <= 25)\n      OP_SPLIT\n      OP_SWAP\n      OP_SPLIT\n      OP_ROT\n      OP_ROT\n\n      //\n      // check output script, which includes address\n      // ... <unit> <outputs[2-n]> <value1 as bin> <outputscript1>\n      //\n\n      // $outputScript1\n      <0x76a914147c021a6995105ea0e62762b23f5497520d555688ac>\n      OP_EQUALVERIFY\n\n      //\n      // check that value/share == unit (the reverse of value = share * unit)\n      // ... <unit> <outputs[2-n]> <value1 as bin>\n      //\n\n      OP_BIN2NUM\n      // $share1\n      <900>\n      OP_DIV\n      <2>\n      OP_PICK\n      OP_EQUALVERIFY\n\n    OP_ENDIF\n\n    // \n    // check if party2 must be present\n    // ... <unit> <outputs[2-n]>\n    //\n\n    OP_OVER\n    // $minUnit2\n    <6>\n    OP_GREATERTHANOREQUAL\n    OP_IF\n\n      //\n      // extract value and output script (save remaining outputs)\n      // ... <unit> <outputs[2-n]>\n      //\n\n      <8>\n      OP_SPLIT\n      <1>      // first byte is the var size, always minimally encoded (size <= 25)\n      OP_SPLIT\n      OP_SWAP\n      OP_SPLIT\n      OP_ROT\n      OP_ROT\n\n      //\n      // check output script, which includes address\n      // ... <unit> <outputs[3-n]> <value2 as bin> <outputscript2>\n      //\n\n      // $outputScript2\n      <0x76a9140f17b7558fdc7d538f37b61c548280d8b28738c288ac>\n      OP_EQUALVERIFY\n\n      //\n      // check that value/share == unit (the reverse of value = share * unit)\n      // ... <unit> <outputs[3-n]> <value2 as bin>\n      //\n\n      OP_BIN2NUM\n      // $share2\n      <100>\n      OP_DIV\n      <2>\n      OP_PICK\n      OP_EQUALVERIFY\n\n    OP_ENDIF\n\n    //\n    // ensure that there are not more outputs\n    // ... <unit> <outputs[3-n]>\n    //\n    // No extra outputs are allowed for safety and because the transaction\n    // priority is relevant for the contract. By restricting outputs it's\n    // possible to ensure that the fees are never less than the chosen amount.\n    //\n    // Without this it would be, in principle, possible to abuse high priority\n    // contracts and redirect some of the fees to another output.\n    //\n\n    OP_1ADD // only a 0x tail is a valid number\n    \n    //\n    // clean stack by dropping verified tail and unit\n    // ... <unit> 1\n    //\n\n    OP_2DROP\n\n  OP_ENDIF\n\nOP_ENDIF\n\n//\n// reconstruct the preimage from its parts\n// <sig,sigflags> <preimage[1,2,3,4,5,6,7,8,9-10]>\n//\n\nOP_CAT\nOP_CAT\nOP_CAT\nOP_CAT\nOP_CAT\nOP_CAT\nOP_CAT\nOP_CAT\n\n//\n// add validation public key\n// <sig,sigflags> <preimage>\n//\n\n// $pubkey\n<0x027ce376e17e46e46614266096d8bc723c881b600227c1b496ada37b1a668b2d8b>\n\n//\n// check transaction signature\n// <sig,sigflags> <preimage> <pubkey>\n//\n\nOP_3DUP\nOP_NIP\nOP_2DROP // OP_CHECKSIGVERIFY\n\n//\n// prepare signature for prehash validation by dropping sighas byte\n// <sig,sigflags> <preimage> <pubkey>\n//\n\nOP_ROT\n<64>\nOP_SPLIT\nOP_DROP\n\n//\n// prepare preimage for validation by hashing once\n// <preimage> <pubkey> <sig> \n//\n\nOP_ROT\nOP_SHA256\n\n//\n// validate preimage hash \n// <pubkey> <sig> <preimagehash> \n//\n\nOP_ROT\nOP_CHECKDATASIG // does the second sha256 before checking\n\n//\n// end\n// 1\n//\n// All the validations done on prevouts and outputs rests on the preimage\n// being valid. That part is done by the OP_OP_CHECKDATASIG above, but\n// the validation is only meaningful after the previous OP_CHECKSIGVERIFY\n// with the same signature. That's what ensures that the preimage given as \n// input is the actual preimage for the utxo being spent.\n//\n\n<2000>\n"
    }
  },
  "supported": [
    "BCH_2023_05"
  ],
  "version": 0
}
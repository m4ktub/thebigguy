{
  "$schema": "https://ide.bitauth.com/authentication-template-v0.schema.json",
  "description": "Ensuring everyone gets their share.",
  "name": "The Big Guy",
  "entities": {},
  "scripts": {
    "input_36378418": {
      "name": "Input 36378418",
      "script": "<0x608cf301000000001976a914147c021a6995105ea0e62762b23f5497520d555688ac60813700000000001976a9140f17b7558fdc7d538f37b61c548280d8b28738c288ac>\r\n<0xdb9c6fc3ec38e28a23dcefaed96111b6a58fa1dc469cf64ad4b800979c56accfce9b29d1dd6564eecbdd13889c8dcf0c0a2bce380bdd07f03b7a32833721cc03c1>\r\n<0x0200000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000000000fd2f0121027ce376e17e46e46614266096d8bc723c881b600227c1b496ada37b1a668b2d8b6f77ad7b01407f755279a87bbb01687f77820134947f587f547f7701207f755379aa88760800000080ffffffff84630317a9147b537f77a901877e7e7b587f01187f587f7b76557a8888537f7c01007e817b537f7c01007e817b9302d007935480537f8172537f7c01007e817b537f7c01007e817b93537a935480537f8172817c81939352807e7e87678102d0079402e8039676519f636d0a0000000000000000016a87677b517951a263587f517f7c7f7b7b1976a914147c021a6995105ea0e62762b23f5497520d555688ac88810284039652798868517956a263587f517f7c7f7b7b1976a9140f17b7558fdc7d538f37b61c548280d8b28738c288ac8881016496527988688b7b7b6d686832172b0200000000ffffffff5c9eacb632e0afb9c8e36ba2318c92df53e283c43ffb7c6f4bf4f6b4a5b6879f00000000c1000000>\r\n",
      "unlocks": "script1"
    },
    "input_32757207424": {
      "name": "Input 32757207424",
      "script": "<0xd8a43dd00300000017a914d0d9ff0b41273f79826aae8c69ac3f273f71fca287d8a43dd00300000017a914d0d9ff0b41273f79826aae8c69ac3f273f71fca287>\r\n<0x6968f402931632e78ddfa2421977db9e7556043193f88bf60931d0a7d54aa44deda0c31d1d66012bd9189dde23d0785b74707fe747ab7ba49a3424777ade72e8c1>\r\n<0x0200000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000000000fd2f0121027ce376e17e46e46614266096d8bc723c881b600227c1b496ada37b1a668b2d8b6f77ad7b01407f755279a87bbb01687f77820134947f587f547f7701207f755379aa88760800000080ffffffff84630317a9147b537f77a901877e7e7b587f01187f587f7b76557a8888537f7c01007e817b537f7c01007e817b9302d007935480537f8172537f7c01007e817b537f7c01007e817b93537a935480537f8172817c81939352807e7e87678102d0079402e8039676519f636d0a0000000000000000016a87677b517951a263587f517f7c7f7b7b1976a914147c021a6995105ea0e62762b23f5497520d555688ac88810284039652798868517956a263587f517f7c7f7b7b1976a9140f17b7558fdc7d538f37b61c548280d8b28738c288ac8881016496527988688b7b7b6d686880517ba007000000ffffffff6405a6899f9395ac1657c4ce8f1cef0134cc28e9da738bc09fbfc199b66f9e3a00000000c1000000>",
      "unlocks": "script1"
    },
    "input_3000": {
      "name": "Input 3000",
      "script": "<0x84030000000000001976a914147c021a6995105ea0e62762b23f5497520d555688ac>\r\n<0xf95fd4c2cb8a3fa5f7069f68ae63f362ad43b5b5b46e179dcffc0dbedbb47729cbb3e60314484718f06bf77f71a84b454913b5bb91a475287d74b555a2102db1c1>\r\n<0x0200000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000000000fd2f0121027ce376e17e46e46614266096d8bc723c881b600227c1b496ada37b1a668b2d8b6f77ad7b01407f755279a87bbb01687f77820134947f587f547f7701207f755379aa88760800000080ffffffff84630317a9147b537f77a901877e7e7b587f01187f587f7b76557a8888537f7c01007e817b537f7c01007e817b9302d007935480537f8172537f7c01007e817b537f7c01007e817b93537a935480537f8172817c81939352807e7e87678102d0079402e8039676519f636d0a0000000000000000016a87677b517951a263587f517f7c7f7b7b1976a914147c021a6995105ea0e62762b23f5497520d555688ac88810284039652798868517956a263587f517f7c7f7b7b1976a9140f17b7558fdc7d538f37b61c548280d8b28738c288ac8881016496527988688b7b7b6d6868b80b000000000000ffffffff23172f5ad5d044ab68a5915feb47c52bda3595762e7cdc26d76ca50d6fdb615000000000c1000000>",
      "unlocks": "script1"
    },
    "input_2999": {
      "name": "Input 2999",
      "script": "<0x0000000000000000016a>\r\n<0xeceff1504bbe2f3d04acee23a052f72acd9b34c1858182871f2090a47d6ee3b7523c4e88603aae0a03221a3ad6f7e54054dda3f1a9cf8ba21323033dcb3edffdc1>\r\n<0x0200000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000000000fd2f0121027ce376e17e46e46614266096d8bc723c881b600227c1b496ada37b1a668b2d8b6f77ad7b01407f755279a87bbb01687f77820134947f587f547f7701207f755379aa88760800000080ffffffff84630317a9147b537f77a901877e7e7b587f01187f587f7b76557a8888537f7c01007e817b537f7c01007e817b9302d007935480537f8172537f7c01007e817b537f7c01007e817b93537a935480537f8172817c81939352807e7e87678102d0079402e8039676519f636d0a0000000000000000016a87677b517951a263587f517f7c7f7b7b1976a914147c021a6995105ea0e62762b23f5497520d555688ac88810284039652798868517956a263587f517f7c7f7b7b1976a9140f17b7558fdc7d538f37b61c548280d8b28738c288ac8881016496527988688b7b7b6d6868b70b000000000000ffffffff0e8538c66c434675836e2198aceb9a0bb62f3778a505eba907d843d312712b6d00000000c1000000>",
      "unlocks": "script1"
    },
    "script1": {
      "lockingType": "p2sh20",
      "name": "900/100 - 2000 fee",
      "script": "//\n// start\n// <outputs> <sig,sigflags> <preimage>\n//\n\n// $pubkey\n<0x027ce376e17e46e46614266096d8bc723c881b600227c1b496ada37b1a668b2d8b>\n\n//\n// start by checking transaction signature\n// <outputs> <sig,sigflags> <preimage> <pubkey>\n//\n\nOP_3DUP\nOP_NIP\nOP_2DROP // OP_CHECKSIGVERIFY\n\n//\n// check preimage with same signature\n// <outputs> <sig,sigflags> <preimage> <pubkey>\n\nOP_ROT\n<64>\nOP_SPLIT\nOP_DROP\n\n// <outputs> <preimage> <pubkey> <sig>\n\n<2>\nOP_PICK\n\n// <outputs> <preimage> <pubkey> <sig> <preimage>\n\nOP_SHA256\nOP_ROT\n\n// <outputs> <preimage> <sig> <sha256(preimage)> <pubkey>\n\nOP_CHECKDATASIGVERIFY // does the second sha256 before checking\n\n//\n// extract script, value, and hashoutputs from preimage\n// <outputs> <preimage> \n//\n// The script code is variable so we count 52 bytes back for the value.\n//\n\n<104>    // BIP-143 items 1 - 5\nOP_SPLIT\nOP_NIP   // drop version, hashPrevouts, hashSequence, outpoint\n\n// <outputs> <size,script><value><nsequence><hashoutputs><nlocktime><sighash>\n\nOP_SIZE\n<52>     // size of BIP items 6 - 10 (all but script code)\nOP_SUB\nOP_SPLIT\n\n// <outputs> <size,script> <value><nsequence><hashoutputs><nlocktime><sighash>\n\n<8>\nOP_SPLIT\n<4>\nOP_SPLIT\nOP_NIP\n<32>\nOP_SPLIT\nOP_DROP\n\n//\n// check outputs SHA256d\n// <outputs> <size,script> <value as bin> <hashoutputs>\n//\n\n<3>\nOP_PICK\nOP_HASH256\nOP_EQUALVERIFY\n\n//\n// check for input value overflow (5 bytes of more)\n// <outputs> <size,script> <value as bin>\n//\n// Script numbers are signed and may require a leading 0 byte to mark\n// the number as positive when the most significant bit is set. But \n// script math operatos only accept minimally encoded numbers that fit \n// in 4 bytes. This means that shares can only be verified for values\n// no larger than 0x7fffffff (big-endian).\n//\n// To make all inputs spendable there are two paths. When the input\n// value is within range, the shares are computed as expected. But when\n// the input value is out of range, only two outputs to the contract\n// address are allowed and their values (plus the fee) must match the\n// input value. This can be done because 64-bit additional can be\n// emulated with lower-bit addition and carry over. To avoid issues\n// with the leading zero, 24-bit addition is used.\n//\n\nOP_DUP\n<0x00000080ffffffff>\nOP_AND\nOP_IF\n\n  //\n  // start by computing the contract script  \n  // <outputs> <size,script> <value as bin>\n  //\n\n  <0x17a914>\n  OP_ROT\n  <3>\n  OP_SPLIT\n  OP_NIP\n  OP_HASH160\n  <0x87>\n  OP_CAT\n  OP_CAT\n\n  //\n  // validate output destinations, preserve output values\n  // <outputs> <value as bin> <contractscript>\n  //\n\n  OP_ROT\n\n  <8>\n  OP_SPLIT\n  <24>\n  OP_SPLIT\n  <8>\n  OP_SPLIT\n\n  OP_ROT\n\n  // <value as bin> <contractscript> <value1 as bin> <value2 as bin> <script1> <script2>\n\n  OP_DUP\n  <5>\n  OP_ROLL\n\n  OP_EQUALVERIFY // <script2> == <contractscript> \n  OP_EQUALVERIFY // <script1> == <script2> \n\n  //\n  // validate that output values plus fee equals input value\n  // <value as bin> <value1 as bin> <value2 as bin>\n  //\n\n  <3>\n  OP_SPLIT\n  OP_SWAP\n  <0x00>\n  OP_CAT\n  OP_BIN2NUM\n  OP_ROT\n\n  <3>\n  OP_SPLIT\n  OP_SWAP\n  <0x00>\n  OP_CAT\n  OP_BIN2NUM\n  OP_ROT\n\n  OP_ADD     // add bits 0 - 23\n\n  // $fee\n  <2000>\n  OP_ADD     // add fee, can be at most 2113929217\n\n  <4>\n  OP_NUM2BIN\n  <3>\n  OP_SPLIT\n  OP_BIN2NUM // carryover for bits 24 - 47\n  OP_2SWAP\n\n  <3>\n  OP_SPLIT\n  OP_SWAP\n  <0x00>\n  OP_CAT\n  OP_BIN2NUM\n  OP_ROT\n\n  <3>\n  OP_SPLIT\n  OP_SWAP\n  <0x00>\n  OP_CAT\n  OP_BIN2NUM\n  OP_ROT\n\n  OP_ADD     // add bits 24 - 27\n  <3>\n  OP_ROLL\n  OP_ADD     // add carryover for bits 24 - 47\n\n  <4>\n  OP_NUM2BIN\n  <3>\n  OP_SPLIT\n  OP_BIN2NUM // carryover for bits 48 - 63\n  OP_2SWAP\n\n  OP_BIN2NUM // will always have a leading zero\n  OP_SWAP\n  OP_BIN2NUM // will always have a leading zero\n  \n  OP_ADD     // add bits 48 - 63\n  OP_ADD     // add carryover for bits 48 - 63\n\n  <2>\n  OP_NUM2BIN\n\n  OP_CAT\n  OP_CAT\n\n  OP_EQUAL\n\n  //\n  // end\n  // 1\n  //\n  // The result of OP_EQUAL determines the success of the script, that is,\n  // the transaction is finally valid if the sum the outputs and the fee\n  // produced the input value.\n  //\n\nOP_ELSE\n\n  //\n  // can validate shares, start by taking fixed fee from value\n  // <outputs> <size,script> <value as bin>\n  //\n\n  OP_BIN2NUM\n  // $fee\n  <2000>\n  OP_SUB\n\n  //\n  // calculate 1/1000 unit from input value\n  // <outputs> <size,script> <outputvalue>\n  //\n\n  <1000>\n  OP_DIV\n\n  //\n  // check if unit is below the minimum for every share\n  // <outputs> <size,script> <unit>\n  //  \n\n  OP_DUP\n  // $absoluteMinShare\n  <1>\n  OP_LESSTHAN\n  OP_IF\n\n    //\n    // drop unit and script, check for an empty OP_RETURN\n    // <outputs> <size,script> <unit>\n    //\n    // The OP_RETURN is enforced because there's no way to respect the shares\n    // and any other split would be arbitrary. A future version may allow\n    // consolidation to the input/contract address.\n    //\n\n    OP_2DROP\n    <0x0000000000000000016a>\n    OP_EQUAL\n\n    //\n    // end\n    // 1\n    //\n    // The result of OP_EQUAL determines the success of the script, that is,\n    // the transaction is finally valid if the there is an empty OP_RETURN.\n    //\n\n  OP_ELSE\n\n    //\n    // bring outputs to the top, to allow for dynamic number of shares\n    // <outputs> <size,script> <unit>\n    //\n\n    OP_ROT\n\n    // \n    // check if party1 must be present\n    // <size,script> <unit> <outputs[1:]>\n    //\n\n    <1>\n    OP_PICK\n    // $minUnit1\n    <1>\n    OP_GREATERTHANOREQUAL\n    OP_IF\n\n      //\n      // extract value and script (save remaining outputs)\n      // <size,script> <unit> <outputs>\n      //\n\n      <8>      // value\n      OP_SPLIT\n      <1>      // first byte is the var size, always minimally encoded (size <= 25)\n      OP_SPLIT\n      OP_SWAP\n      OP_SPLIT\n      OP_ROT   // save tail for next iteration\n      OP_ROT\n\n      //\n      // check script, which includes address\n      // <size,script> <unit> <outputs[2:]> <value1 as bin> <script1>\n      //\n\n      // $outputScript1\n      <0x76a914147c021a6995105ea0e62762b23f5497520d555688ac>\n      OP_EQUALVERIFY\n\n      //\n      // check that value/share == unit (the reverse of value = share * unit)\n      // <size,script> <unit> <outputs[2:]> <value1:bin>\n      //\n\n      OP_BIN2NUM\n      // $share1\n      <900>\n      OP_DIV\n      <2>\n      OP_PICK\n      OP_EQUALVERIFY\n\n    OP_ENDIF\n\n    // \n    // check if party2 must be present\n    //\n\n    <1>\n    OP_PICK\n    // $minUnit2\n    <6>\n    OP_GREATERTHANOREQUAL\n    OP_IF\n      //\n      // extract value and script (save remaining outputs)\n      // <size,script> <unit> <outputs[2:]>\n      //\n\n      <8>      // value\n      OP_SPLIT\n      <1>      // first byte is the var size, always minimally encoded (size <= 25)\n      OP_SPLIT\n      OP_SWAP\n      OP_SPLIT\n      OP_ROT   // save tail for next iteration\n      OP_ROT\n\n      //\n      // check script, which includes address\n      // <size,script> <unit> <outputs[3:]> <value2:bin> <script2>\n      //\n\n      // $outputScript2\n      <0x76a9140f17b7558fdc7d538f37b61c548280d8b28738c288ac>\n      OP_EQUALVERIFY\n\n      //\n      // check that value/share == unit (the reverse of value = share * unit)\n      // <size,script> <unit> <outputs[3:]> <value2:bin>\n      //\n\n      OP_BIN2NUM\n      // $share2\n      <100>\n      OP_DIV\n      <2>\n      OP_PICK\n      OP_EQUALVERIFY\n\n    OP_ENDIF\n\n    //\n    // drop the 0x tail and unit\n    // <size,script> <unit> <outputs[n:]>\n    //\n    // No extra outputs are allowed for safety and because the transaction\n    // priority is relevant for the contract. By restricting outputs it's\n    // possible to ensure that the fees are never less than the chosen amount.\n    //\n    // Without this it would be, in principle, possible to abuse high priority\n    // contracts to pay for other transfers by including more inputs and more\n    // outputs that do not add to the fees. With this, it's only possible to have\n    // more inputs which can only increase the fee.\n    //\n\n    OP_1ADD // only a 0x tail is a valid number\n    OP_ROT\n    OP_ROT\n\n    // 1 <size,script> <unit>\n\n    OP_2DROP\n    \n    //\n    // end\n    // 1\n    //\n    // The result of OP_1ADD ends up determining the success of the script.\n    // If there are more outputs, the op will fail and the script will not\n    // reach this point. If there are no more outputs then 0x will be\n    // interpreted as 0 and the op will produce the expected 1. The other\n    // elements are dropped because of the clean stack rule.\n    //\n\n  OP_ENDIF\n\nOP_ENDIF\n\n//\n// end\n// 1\n"
    }
  },
  "supported": [
    "BCH_2023_05"
  ],
  "version": 0
}